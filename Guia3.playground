//Ejercicio 1
import Foundation

enum EstadoPedido {
    case procesando, enviado, entregado
}

protocol NotificacionPedido {
    func notificarCambioDeEstado(nuevoEstado: EstadoPedido) -> Void
}

class Pedido {
    var estado: EstadoPedido
    var delegado: NotificacionPedido?
    
    init(estado: EstadoPedido) {
        self.estado = estado
    }
    
    func cambiarEstado(nuevoEstado: EstadoPedido) {
        estado = nuevoEstado
        delegado?.notificarCambioDeEstado(nuevoEstado: nuevoEstado)
    }
}

class GestorPedido: NotificacionPedido {
    func notificarCambioDeEstado(nuevoEstado: EstadoPedido) {
        print("El estado del pedido ha cambiado a: \(nuevoEstado)")
    }
}

var gestor = GestorPedido()
var pedido = Pedido(estado: .procesando)
pedido.delegado = gestor
pedido.cambiarEstado(nuevoEstado: .enviado) 



//Ejercicio 2
import Foundation

class Calculadora {
    static func sumar(a: Int, b: Int) -> Int {
        return a + b
    }
    
    static func restar(a: Int, b: Int) -> Int {
        return a - b
    }
}

func calcularSumaYRestaTotales(numeros: [Int]) -> (sumaTotal: Int, restaTotal: Int) {
    var sumaTotal = 0
    var restaTotal = 0
    for numero in numeros {
        sumaTotal = Calculadora.sumar(a: sumaTotal, b: numero)
        restaTotal = Calculadora.restar(a: restaTotal, b: numero)
    }
    
    return (sumaTotal, restaTotal)
}

var numeros = [1, 2, 3, 4, 5]
var resultado = calcularSumaYRestaTotales(numeros: numeros)
print("Suma total: \(resultado.sumaTotal)")
print("Resta total: \(resultado.restaTotal)")



//Ejercicio 3
import Foundation

protocol Figura{
    func calcularArea() -> Double
}

struct Cuadrado: Figura{
    var lado: Double
    
    func calcularArea() -> Double {
        return lado * lado
    }
}

struct Rectangulo: Figura {
    var ancho: Double
    var alto: Double
    
    func calcularArea() -> Double{
        return ancho * alto
    }
}

func calcularAreaTotal(figuras: [Figura]) -> Double{
    var areaTotal = 0.0
    
    for figura in figuras {
        areaTotal = areaTotal + figura.calcularArea()
    }
    
    return areaTotal
}

var cuadrado = Cuadrado(lado: 4.0)
var rectangulo = Rectangulo(ancho: 3.0, alto: 5.0)
var figuras: [Figura] = [cuadrado, rectangulo]

var areaTotal = calcularAreaTotal(figuras: figuras)
print("Area total: \(areaTotal)")



//Ejercicio 4
import Foundation

enum OperacionMatematica {
    case suma, resta, multiplicacion, division
}

class OperadorMatematico {
    static func realizarOperacion(a: Double, b: Double, operacion: OperacionMatematica) -> Double {
        switch operacion {
        case .suma:
            return a + b
        case .resta:
            return a - b
        case .multiplicacion:
            return a * b
        case .division:
            if b != 0 {
                return a / b
            } else {
                print("Error: divisi贸n entre cero")
                return 0
            }
        }
    }
}

var resultadoSuma = OperadorMatematico.realizarOperacion(a: 10, b: 5, operacion: .suma)
print("Resultado de la suma: \(resultadoSuma)")

var resultadoResta = OperadorMatematico.realizarOperacion(a: 10, b: 5, operacion: .resta)
print("Resultado de la resta: \(resultadoResta)")

var resultadoMultiplicacion = OperadorMatematico.realizarOperacion(a: 10, b: 5, operacion: .multiplicacion)
print("Resultado de la multiplicaci贸n: \(resultadoMultiplicacion)")

var resultadoDivision = OperadorMatematico.realizarOperacion(a: 10, b: 5, operacion: .division)
print("Resultado de la divisi贸n: \(resultadoDivision)")

var resultadoDivision2 = OperadorMatematico.realizarOperacion(a: 10, b: 0, operacion: .division)
print("Resultado de la divisi贸n 2: \(resultadoDivision2)")



//Ejercicio 5
import Foundation

protocol Empleado {
    func calcularSalario() -> Double
}

class EmpleadoBase: Empleado {
    var salarioBase: Double
    
    init(salarioBase: Double) {
        self.salarioBase = salarioBase
    }
    
    func calcularSalario() -> Double {
        return salarioBase
    }
}

struct EmpleadoContrato: Empleado {
    var tarifaHora: Double
    var horasTrabajadas: Double
    
    func calcularSalario() -> Double {
        return tarifaHora * horasTrabajadas
    }
}

func calcularSalarioTotal(empleados: [Empleado]) -> Double {
    var salarioTotal = 0.0
    
    for empleado in empleados {
        salarioTotal += empleado.calcularSalario()
    }
    
    return salarioTotal
}

var empleadoBase = EmpleadoBase(salarioBase: 3000.0)
var empleadoContrato = EmpleadoContrato(tarifaHora: 20.0, horasTrabajadas: 100.0)
var empleados: [Empleado] = [empleadoBase, empleadoContrato]

var salarioTotal = calcularSalarioTotal(empleados: empleados)
print("Salario Total: \(salarioTotal)")